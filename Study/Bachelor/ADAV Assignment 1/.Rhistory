geom_tile()
ggplot(data = cormat, aes(x = V1, y = shopping_beh), fill = value) +
geom_tile()
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
cormat <- cor(data[-1], data$shopping_beh)
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
labs (x = "Hobbies and interests", y = "Shopping behaviour")
cormat <- cor(data[-33], data$shopping_beh)
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
labs (x = "Hobbies and interests", y = "Shopping behaviour")
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
library(ggplot2)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
cormat <- cor(data[-33], data$shopping_beh)
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
labs (x = "Hobbies and interests", y = "Shopping behaviour") +
theme_minimal()
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
labs (x = "Hobbies and interests", y = "Shopping behaviour") +
theme(axis.title.x = element_blank())
cormat <- cor(data[-33], data$shopping_beh)
p2
p1
#First, we created a correlation matrix to look at the correlation between the different hobbies and interests and shopping behaviour.
cormat <- cor(data[-33], data$shopping_beh)
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
View(melted_cormat)
#First, we created a correlation matrix to look at the correlation between the different hobbies and interests and shopping behaviour.
cormat <- cor(data[-33], data$shopping_beh)
cormat[, head(3), by = V1]
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
labs (x = "Hobbies and interests", y = "Shopping behaviour") +
#Plot 2
ggplot(data, aes(x = shopping_beh))+
geom_bar()
library(ggplot2)
ggplot(data, aes(x = shopping_beh))+
geom_bar()
cormat[order(cormat)]
View(cormat)
cormat
cormat[order(matrix,-1)]
cormat[order(matrix,-1),]
head(cormat)
order(cormat)
View(cormat)
head(cormat)
library(tidyverse)
library(glmnet)
library(Metrics)
data <- read.csv("responses.csv", header = T)
#reverse scale so it matches the directions of the other items
data <- data %>%
mutate(Finances_rev = 6 - Finances)
#sumscore and avg sumscore of shopping behaviour
data <- data %>%
mutate(shopping_beh = (Finances_rev + Shopping.centres + Branded.clothing + Entertainment.spending + Spending.on.looks + Spending.on.gadgets + Spending.on.healthy.eating),
avg_shopping_beh = (Finances_rev + Shopping.centres + Branded.clothing + Entertainment.spending + Spending.on.looks + Spending.on.gadgets + Spending.on.healthy.eating) /7 ) #eventueel verwijdern als dit niet gebruikt wordt
#Select only the variables in the data that concern hobbies and interests and the shopping behaviour sumscore
data <- data %>%
select(32:63, shopping_beh)
#how many rows contain NA's
sum(is.na(data))
#save the original data in case we need it later
data_orignal <- data
#data without the NA's
data <- drop_na(data)
#First, we created a correlation matrix to look at the correlation between the different hobbies and interests and shopping behaviour.
cormat <- cor(data[-33], data$shopping_beh)
#Plot 1: correlation matrix heatmap
#Reshape the data to make it suitable for the plot
library(reshape2)
melted_cormat <- melt(cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
labs (x = "Hobbies and interests", y = "Shopping behaviour") +
#Plot 2
library(ggplot2)
library(tidyverse)
library(glmnet)
library(Metrics)
data <- read.csv("responses.csv", header = T)
#reverse scale so it matches the directions of the other items
data <- data %>%
mutate(Finances_rev = 6 - Finances)
#sumscore and avg sumscore of shopping behaviour
data <- data %>%
mutate(shopping_beh = (Finances_rev + Shopping.centres + Branded.clothing + Entertainment.spending + Spending.on.looks + Spending.on.gadgets + Spending.on.healthy.eating),
avg_shopping_beh = (Finances_rev + Shopping.centres + Branded.clothing + Entertainment.spending + Spending.on.looks + Spending.on.gadgets + Spending.on.healthy.eating) /7 ) #eventueel verwijdern als dit niet gebruikt wordt
#Select only the variables in the data that concern hobbies and interests and the shopping behaviour sumscore
data <- data %>%
select(32:63, shopping_beh)
#how many rows contain NA's
sum(is.na(data))
#save the original data in case we need it later
data_orignal <- data
#data without the NA's
data <- drop_na(data)
#First, we created a correlation matrix to look at the correlation between the different hobbies and interests and shopping behaviour.
cormat <- cor(data[-33], data$shopping_beh)
#Plot 1: correlation matrix heatmap
#Reshape the data to make it suitable for the plot
library(reshape2)
melted_cormat <- melt(cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
labs (x = "Hobbies and interests", y = "Shopping behaviour") +
#Plot 2
library(ggplot2)
library(tidyverse)
library(glmnet)
library(Metrics)
data <- read.csv("responses.csv", header = T)
#reverse scale so it matches the directions of the other items
data <- data %>%
mutate(Finances_rev = 6 - Finances)
#sumscore and avg sumscore of shopping behaviour
data <- data %>%
mutate(shopping_beh = (Finances_rev + Shopping.centres + Branded.clothing + Entertainment.spending + Spending.on.looks + Spending.on.gadgets + Spending.on.healthy.eating),
avg_shopping_beh = (Finances_rev + Shopping.centres + Branded.clothing + Entertainment.spending + Spending.on.looks + Spending.on.gadgets + Spending.on.healthy.eating) /7 ) #eventueel verwijdern als dit niet gebruikt wordt
#Select only the variables in the data that concern hobbies and interests and the shopping behaviour sumscore
data <- data %>%
select(32:63, shopping_beh)
#how many rows contain NA's
sum(is.na(data))
#save the original data in case we need it later
data_orignal <- data
#data without the NA's
data <- drop_na(data)
#First, we created a correlation matrix to look at the correlation between the different hobbies and interests and shopping behaviour.
cormat <- cor(data[-33], data$shopping_beh)
#Plot 1: correlation matrix heatmap
#Reshape the data to make it suitable for the plot
library(reshape2)
melted_cormat <- melt(cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
labs (x = "Hobbies and interests", y = "Shopping behaviour")
#Plot 2
library(ggplot2)
p2 <- ggplot(data, aes(x = shopping_beh))+
geom_bar()
#full model Hobbies and Interests: y = shopping_beh  ~ all hobby and interests items
fit_ols <- lm(shopping_beh ~ ., data = data)
summary(fit_ols)
set.seed(123)
877 * .7
877 * .3
splits <- sample(c(rep("train", 614),
rep("test", 263)))
data_master <- data %>% mutate(splits = splits)
data_train <- data_master %>% filter(splits == "train")
data_test <- data_master %>% filter(splits == "test")
#Creating matrix for lasso glmnet functions
x_train <- model.matrix(na.action = NULL, shopping_beh ~ ., data_train %>% select(-splits))
#x_train1 <- model.matrix(shopping_beh ~ ., data_train %>% select(-splits))
x_train <- x_train[, -1]
#for diffrent number of predictors
result_nolambda <- glmnet(x = x_train, y = data_train$shopping_beh, alpha = 1)
plot(result_nolambda)
#cvglm()
result_cv <- cv.glmnet(x = x_train, y = data_train$shopping_beh, nfolds = 5)
lambda_1se <- result_cv$lambda.1se
lambda_min <- result_cv$lambda.min
result_cv
lambda_1se
lambda_min
# 1sd from min = 0.4345
plot(result_cv)
lasso_min <- glmnet(x = x_train, y = data_train$shopping_beh, alpha = 1, lambda = lambda_min)
lasso_1se <- glmnet(x = x_train, y = data_train$shopping_beh, alpha = 1, lambda = lambda_1se)
#Shrinked model
coef(lasso_min)
coef(lasso_1se)
x_test <- model.matrix(shopping_beh ~ ., data = data_test %>% select(-splits))
x_test <- x_test[, -1]
y_pred_1se <- as.numeric(predict(lasso_1se, newx = x_test, s = lambda_1se))
y_pred_min <- as.numeric(predict(lasso_min, newx = x_test, s = lambda_min))
tibble(Predicted = y_pred_1se, Observed = data_test$shopping_beh) %>%
ggplot(aes(x = Predicted, y = Observed)) +
geom_point()+
geom_abline(slope = 1, intercept = 0)
#lasso 1se
mse_lasso_1se <- mse(data_test$shopping_beh, y_pred_1se)
#lasso min
mse_lasso_min <- mse(data_test$shopping_beh, y_pred_min)
#ols
data_train <- data_train[,-34] #delete column: splits
fit_ols_train <- lm(shopping_beh ~ ., data = data_train) #volgens mij is de data op de trainset trainen, nutteloos hier
y_pred_ols <- predict(fit_ols_train, newdata = data_test)
mse_ols <-mse(data_test$shopping_beh, y_pred_ols)
mse_lasso_1se
mse_lasso_min
mse_ols
p2 <- ggplot(data, aes(x = shopping_beh))+
geom_bar()
p2
#Shrinked model
coef(lasso_min)
coef(lasso_1se)
coef(lasso_1se)
coef(lasso_1se)
library(tidyverse)
library(glmnet)
library(Metrics)
library(ggplot2)
library(reshape2)
data <- read.csv("responses.csv", header = T)
#reverse scale so it matches the directions of the other items
data <- data %>%
mutate(Finances_rev = 6 - Finances)
#sumscore and avg sumscore of shopping behaviour
data <- data %>%
mutate(shopping_beh = (Finances_rev + Shopping.centres + Branded.clothing + Entertainment.spending + Spending.on.looks + Spending.on.gadgets + Spending.on.healthy.eating))
#text/uitleg bij
dataGen <- data %>%
select(32:63, shopping_beh, Gender) %>%
#Select only the variables in the data that concern hobbies and interests and the shopping behaviour sumscore
data <- data %>%
select(32:63, shopping_beh)
library(tidyverse)
library(glmnet)
library(Metrics)
library(ggplot2)
library(reshape2)
data <- read.csv("responses.csv", header = T)
#reverse scale so it matches the directions of the other items
data <- data %>%
mutate(Finances_rev = 6 - Finances)
#sumscore and avg sumscore of shopping behaviour
data <- data %>%
mutate(shopping_beh = (Finances_rev + Shopping.centres + Branded.clothing + Entertainment.spending + Spending.on.looks + Spending.on.gadgets + Spending.on.healthy.eating))
#text/uitleg bij
dataGen <- data %>%
select(32:63, shopping_beh, Gender)
#Select only the variables in the data that concern hobbies and interests and the shopping behaviour sumscore
data <- data %>%
select(32:63, shopping_beh)
#how many rows contain NA's
sum(is.na(data))
#save the original data in case we need it later        nog iets mee doen
data_orignal <- data
#data without the NA's
data <- drop_na(data)
#full model Hobbies and Interests: y = shopping_beh  ~ all hobby and interests items
fit_ols <- lm(shopping_beh ~ ., data = data)
summary(fit_ols)
#First, we created a correlation matrix to look at the correlation between the different hobbies and interests and shopping behaviour.
cormat <- cor(data[-33], data$shopping_beh)
#Reshape the data to make it suitable for the plot
melted_cormat <- melt(cormat)
melted_cormat$Var1<-str_replace_all(melted_cormat$Var1, "[.]", " ") # Convert names
melted_cormat$posneg <- ifelse(melted_cormat$value > 0, "apos", "neg")  # influence flag
melted_cormat <- melted_cormat[order(melted_cormat$value), ]  # sort
melted_cormat$Var1 <- factor(melted_cormat$Var1, levels = melted_cormat$Var1)  # convert to factor to retain sorted order in plot.
# Diverging Barcharts
ggplot(melted_cormat, aes(x=Var1, y=value, label=value)) +
geom_bar(stat='identity', aes(fill=posneg), width=0.6)  +
scale_fill_manual(name="Type of effect",
labels = c("Positive effect", "Negative effect"),
values = c("apos"="#00ba38", "neg"="#f8766d")) +
labs(subtitle="Effect of hobbies on shopping behaviour",
title= "Diverging Bar Plot",
x = 'Type of interest',
y = 'Influence Value') +
coord_flip()
#Plot 2
dataGen <- drop_na(dataGen)
dataGen <- split(dataGen, dataGen$Gender)
dataGen[1] <- NULL
dataGen$male$Gender <- NULL
dataGen$female$Gender <- NULL
genMeans <- list(male = colMeans(dataGen$male), female = colMeans(dataGen$female))
set.seed(123)
splits <- sample(c(rep("train", 614),
rep("test", 263)))
data_master <- data %>% mutate(splits = splits)
data_train <- data_master %>% filter(splits == "train")
data_test <- data_master %>% filter(splits == "test")
#Creating matrix for lasso glmnet functions
x_train <- model.matrix(na.action = NULL, shopping_beh ~ ., data_train %>% select(-splits))
# The glmnet function for lasso regression will create a new intercept. The original intercept must be removed before using this regression model.
x_train <- x_train[, -1]
head(x_train)
#for diffrent values of lambda
#This plot shows the increase of coefficients when the penalty does decrease
result_nolambda <- glmnet(x = x_train, y = data_train$shopping_beh, family = 'gaussian', alpha = 1)
plot(result_nolambda)
#cvglm() to choose a lambda value based on 5 folds
result_cv <- cv.glmnet(x = x_train, y = data_train$shopping_beh, nfolds = 5)
plot(result_cv)
#variables for the diffrent values of lambda, based on crossvalidation
lambda_1se <- result_cv$lambda.1se
lambda_min <- result_cv$lambda.min
#nonzero coefficients
result_cv
#Lasso regression models for two values for lambda (min & 1se)
lasso_min <- glmnet(x = x_train, y = data_train$shopping_beh, alpha = 1, lambda = lambda_min)
lasso_1se <- glmnet(x = x_train, y = data_train$shopping_beh, alpha = 1, lambda = lambda_1se)
#Shrinked model
coef(lasso_min)
coef(lasso_1se)
x_test <- model.matrix(shopping_beh ~ ., data = data_test %>% select(-splits))
x_test <- x_test[, -1]
y_pred_1se <- as.numeric(predict(lasso_1se, newx = x_test, s = lambda_1se))
y_pred_min <- as.numeric(predict(lasso_min, newx = x_test, s = lambda_min))
#tabble for predicted vs. observed
tibble(Predicted = y_pred_1se, Observed = data_test$shopping_beh) %>%
ggplot(aes(x = Predicted, y = Observed)) +
geom_point()+
geom_abline(slope = 1, intercept = 0)+
labs(title = "Predicted vs. observed")
#lasso 1se
mse_lasso_1se <- mse(data_test$shopping_beh, y_pred_1se)
#lasso min
mse_lasso_min <- mse(data_test$shopping_beh, y_pred_min)
#ols
data_train <- data_train[,-34] #delete column: splits
fit_ols_train <- lm(shopping_beh ~ ., data = data_train)
y_pred_ols <- predict(fit_ols_train, newdata = data_test)
mse_ols <-mse(data_test$shopping_beh, y_pred_ols)
#comparing the models on
mse_lasso_1se
mse_lasso_min
mse_ols
View(data)
library(tidyverse)
library(glmnet)
library(Metrics)
library(ggplot2)
library(reshape2)
data <- read.csv("responses.csv", header = T)
View(data)
library(tidyverse)
library(glmnet)
library(Metrics)
library(ggplot2)
library(reshape2)
data <- read.csv("responses.csv", header = T)
#reverse scale so it matches the directions of the other items
data <- data %>%
mutate(Finances_rev = 6 - Finances)
#sumscore and avg sumscore of spending habits
data <- data %>%
mutate(spending_habits = (Finances_rev + Shopping.centres + Branded.clothing + Entertainment.spending + Spending.on.looks + Spending.on.gadgets + Spending.on.healthy.eating))
#Select only the variables in the data that concern hobbies and interests and the spending habits sumscore
data <- data %>%
select(32:63, spending habits)
library(tidyverse)
library(glmnet)
library(Metrics)
library(ggplot2)
library(reshape2)
data <- read.csv("responses.csv", header = T)
#reverse scale so it matches the directions of the other items
data <- data %>%
mutate(Finances_rev = 6 - Finances)
#sumscore and avg sumscore of spending habits
data <- data %>%
mutate(spending_habits = (Finances_rev + Shopping.centres + Branded.clothing + Entertainment.spending + Spending.on.looks + Spending.on.gadgets + Spending.on.healthy.eating))
#Select only the variables in the data that concern hobbies and interests and the spending habits sumscore
data <- data %>%
select(32:63, spending_habits)
#how many rows contain NA's
sum(is.na(data))
#data without the NA's
data <- drop_na(data)
#full model Hobbies and Interests: y = spending habits  ~ all hobby and interests items
fit_ols <- lm(spending habits ~ ., data = data)
library(tidyverse)
library(glmnet)
library(Metrics)
library(ggplot2)
library(reshape2)
data <- read.csv("responses.csv", header = T)
#reverse scale so it matches the directions of the other items
data <- data %>%
mutate(Finances_rev = 6 - Finances)
#sumscore and avg sumscore of spending habits
data <- data %>%
mutate(spending_habits = (Finances_rev + Shopping.centres + Branded.clothing + Entertainment.spending + Spending.on.looks + Spending.on.gadgets + Spending.on.healthy.eating))
#Select only the variables in the data that concern hobbies and interests and the spending habits sumscore
data <- data %>%
select(32:63, spending_habits)
#how many rows contain NA's
sum(is.na(data))
#data without the NA's
data <- drop_na(data)
#full model Hobbies and Interests: y = spending habits  ~ all hobby and interests items
fit_ols <- lm(spending_habits ~ ., data = data)
summary(fit_ols)
#First, we created a correlation matrix to look at the correlation between the different hobbies and interests and spending habits.
cormat <- cor(data[-33], data$spending_habits)
#Reshape the data to make it suitable for the plot
melted_cormat <- melt(cormat)
melted_cormat$Var1<-str_replace_all(melted_cormat$Var1, "[.]", " ") # Convert names
melted_cormat$posneg <- ifelse(melted_cormat$value > 0, "apos", "neg")  # influence flag
melted_cormat <- melted_cormat[order(melted_cormat$value), ]  # sort
melted_cormat$Var1 <- factor(melted_cormat$Var1, levels = melted_cormat$Var1)  # convert to factor to retain sorted order in plot.
# Diverging Barcharts
ggplot(melted_cormat, aes(x=Var1, y=value, label=value)) +
geom_bar(stat='identity', aes(fill=posneg), width=0.6)  +
scale_fill_manual(name="Type of effect",
labels = c("Positive effect", "Negative effect"),
values = c("apos"="#00ba38", "neg"="#f8766d")) +
labs(subtitle="Effect of hobbies on spending habits",
title= "Diverging Bar Plot",
x = 'Type of interest',
y = 'Influence Value') +
coord_flip()
#Plot 2
set.seed(123)
splits <- sample(c(rep("train", 614),
rep("test", 263)))
data_master <- data %>% mutate(splits = splits)
data_train <- data_master %>% filter(splits == "train")
data_test <- data_master %>% filter(splits == "test")
#Creating matrix for lasso glmnet functions
x_train <- model.matrix(na.action = NULL, spending_habits ~ ., data_train %>% select(-splits))
# The glmnet function for lasso regression will create a new intercept. The original intercept must be removed before using this regression model.
x_train <- x_train[, -1]
head(x_train)
#for diffrent values of lambda
#This plot shows the increase of coefficients when the penalty does decrease
result_nolambda <- glmnet(x = x_train, y = data_train$spending_habits, family = 'gaussian', alpha = 1)
plot(result_nolambda)
#cvglm() to choose a lambda value based on 5 folds
result_cv <- cv.glmnet(x = x_train, y = data_train$spending_habits, nfolds = 5)
plot(result_cv)
#variables for the diffrent values of lambda, based on crossvalidation
lambda_1se <- result_cv$lambda.1se
lambda_min <- result_cv$lambda.min
#nonzero coefficients
result_cv
#Lasso regression models for two values for lambda (min & 1se)
lasso_min <- glmnet(x = x_train, y = data_train$spending_habits, alpha = 1, lambda = lambda_min)
lasso_1se <- glmnet(x = x_train, y = data_train$spending_habits, alpha = 1, lambda = lambda_1se)
#Shrinked model
coef(lasso_min)
coef(lasso_1se)
x_test <- model.matrix(spending_habits ~ ., data = data_test %>% select(-splits))
x_test <- x_test[, -1]
y_pred_1se <- as.numeric(predict(lasso_1se, newx = x_test, s = lambda_1se))
y_pred_min <- as.numeric(predict(lasso_min, newx = x_test, s = lambda_min))
#tabble for predicted vs. observed
tibble(Predicted = y_pred_1se, Observed = data_test$spending_habits) %>%
ggplot(aes(x = Predicted, y = Observed)) +
geom_point()+
geom_abline(slope = 1, intercept = 0)+
labs(title = "Predicted vs. observed")
#lasso 1se
mse_lasso_1se <- mse(data_test$spending_habits, y_pred_1se)
#lasso min
mse_lasso_min <- mse(data_test$spending_habits, y_pred_min)
#ols
data_train <- data_train[,-34] #delete column: splits
fit_ols_train <- lm(spending_habits ~ ., data = data_train)
y_pred_ols <- predict(fit_ols_train, newdata = data_test)
mse_ols <-mse(data_test$spending_habits, y_pred_ols)
#comparing the models on
mse_lasso_1se
mse_lasso_min
mse_ols
